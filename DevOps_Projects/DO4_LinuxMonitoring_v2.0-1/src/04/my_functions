#!/bin/bash

check_input() {
  if [ $# -gt 0 ]; then
    echo "Wrong input!"
    exit 1
  fi
  echo "Start script"
}

remote_addr() {
    echo "$((RANDOM % 255 + 1)).$((RANDOM % 255 + 1)).$((RANDOM % 255 + 1)).$((RANDOM % 255 + 1))"
}

status() {
  codes=("200" "201" "400" "401" "403" "404" "500" "501" "502" "503")
  var=$((RANDOM % 10 + 0))
  echo "${codes[$var]}"
  # Статус 200 означает, что запрос успешно обработан;
  # Статус 201 означает, что запрос успешно выполнен и в результате был создан ресурс;
  # Статус 400 означает, что сервер не понимает запрос из-за неверного синтаксиса;
  # Статус 401 означает, что для получения запрашиваемого ответа нужна аутентификация. Статус похож на статус 403, но,в этом случае, аутентификация возможна;
  # Статус 403 означает, что у клиента нет прав доступа к содержимому, поэтому сервер отказывается дать надлежащий ответ;
  # Статус 404 означает, что сервер не может найти запрашиваемый ресурс;
  # Статус 500 означает, что сервер столкнулся с ситуацией, которую он не знает как обработать;
  # Статус 501 означает, что метод запроса не поддерживается сервером и не может быть обработан;
  # Статус 502 означает, что сервер, во время работы в качестве шлюза для получения ответа, нужного для обработки запроса, получил недействительный (недопустимый) ответ;
  # Статус 503 означает, что сервер не готов обрабатывать запрос. Зачастую причинами являются отключение сервера или то, что он перегружен. Обратите внимание, что вместе с этим ответом удобная для пользователей(user-friendly) страница должна отправлять объяснение проблемы. 
# Этот ответ должен использоваться для временных условий и Retry-After: HTTP-заголовок должен, если возможно, содержать предполагаемое время до восстановления сервиса. 
# Веб-мастер также должен позаботиться о заголовках, связанных с кешем, которые отправляются вместе с этим ответом, так как эти ответы, связанные с временными условиями, обычно не должны кешироваться;
}

request() {
  voids=("GET" "POST" "PUT" "PATCH" "DELETE")
  echo "${voids[$((RANDOM % 5 + 0))]}"
}

time_local() {
  sec=$((RANDOM % 59 + 0 ))
  all_sec=$(($1 * 3600 + $2 * 60 + $sec))
	actual_time=$(date -d "@$all_sec" '+%T')
  echo ":$actual_time"
}

body_bytes_sent() {
    echo "$((RANDOM % 2000  + 1000))"
}

url() {
    echo "$((RANDOM % 999 + 1))"
}

http_user_agent() {
  agents=(
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko/20100101 Firefox/85.0" #Mozilla
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36" #Google Chrome
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.81" #Microsoft Edge
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.2 Safari/605.1.15" # Safari
  "Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9b3) Gecko/2008020514 Opera 9.5" #Opera
  "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko" #Internet Explorer
  "Mozilla/5.0 (compatible; YandexAccessibilityBot/3.0; +http://yandex.com/bots)" #Crawler
  "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)" #Crawler bot 
  "Mozilla/5.0 (compatible; python-requests/2.26.0)" #Library
  "Mozilla/5.0 NetTool/2.0 (Windows NT 10.0; Win64; x64)" #Net tool
  )
  echo "${agents[$((RANDOM % 9 + 0))]}" 
}